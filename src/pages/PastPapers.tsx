"use client"
import { useState, useCallback, useRef } from "react" // Import useRef for timeout
import type React from "react"

import { Layout } from "@/components/layout/Layout"
import { PDFViewer } from "@/components/pdf/PDFViewer"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { useToast } from "@/hooks/use-toast"
import {
  FileText,
  ClipboardList,
  CheckSquare,
  ChevronRight,
  Home,
  BookOpen,
  Calendar,
  ArrowLeft,
  Eye,
  GraduationCap,
  Clock,
  FileX,
  ChevronDown,
} from "lucide-react"

// This file is generated by `scripts/generate-paper-data.js`
import allPapersData from "@/data/papers.json"

// --- TYPE DEFINITIONS ---
interface PDFFileData {
  name: string
  path: string
}

interface PaperSet {
  id: string
  series: string
  qp: PDFFileData | null
  ms: PDFFileData | null
  in: PDFFileData | null
}

type PapersData = {
  [subject: string]: {
    [session: string]: {
      [year: string]: PaperSet[]
    }
  }
}

// --- BREADCRUMB COMPONENT ---
interface BreadcrumbProps {
  steps: string[]
  onNavigate: (index: number) => void
}

const Breadcrumbs = ({ steps, onNavigate }: BreadcrumbProps) => (
  <div className="bg-muted/30 rounded-lg p-4 mb-8">
    <nav className="flex items-center space-x-2 text-sm">
      <button
        onClick={() => onNavigate(0)}
        className="flex items-center gap-2 px-3 py-1.5 rounded-md hover:bg-primary/10 hover:text-primary transition-all duration-200 font-medium"
      >
        <Home className="h-4 w-4" />
        Past Papers
      </button>
      {steps.map((step, index) => (
        <div key={index} className="flex items-center space-x-2">
          <ChevronRight className="h-4 w-4 text-muted-foreground" />
          <button
            onClick={() => onNavigate(index + 1)}
            className={`px-3 py-1.5 rounded-md transition-all duration-200 ${
              index === steps.length - 1
                ? "bg-primary text-primary-foreground font-medium"
                : "hover:bg-primary/10 hover:text-primary text-muted-foreground"
            }`}
            disabled={index === steps.length - 1}
          >
            {step}
          </button>
        </div>
      ))}
    </nav>
  </div>
)

// --- LOADING COMPONENT ---
const LoadingOverlay = () => (
  <div className="fixed inset-0 bg-background/95 backdrop-blur-sm flex items-center justify-center z-50">
    <div className="bg-card p-8 rounded-xl shadow-lg border flex flex-col items-center gap-4">
      <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent" />
      <div className="text-center">
        <h3 className="text-lg font-semibold">Loading Paper</h3>
        <p className="text-sm text-muted-foreground">Please wait while we fetch your document...</p>
      </div>
    </div>
  </div>
)

// --- SESSION SELECTOR COMPONENT ---
interface SessionSelectorProps {
  subject: string
  sessions: string[]
  onSelectSession: (session: string) => void
}

const SessionSelector = ({ subject, sessions, onSelectSession }: SessionSelectorProps) => {
  const [open, setOpen] = useState(false)
  const timeoutRef = useRef<NodeJS.Timeout | null>(null)

  const handleMouseEnter = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
    }
    setOpen(true)
  }

  const handleMouseLeave = () => {
    timeoutRef.current = setTimeout(() => {
      setOpen(false)
    }, 100) // Small delay to prevent accidental close
  }

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Card
          className="group hover:shadow-xl hover:border-primary/50 transition-all duration-300 cursor-pointer transform hover:-translate-y-2"
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          onClick={() => setOpen(!open)} // Toggle on click for consistent behavior
        >
          <CardHeader className="text-center pb-6">
            <div className="mx-auto mb-4 p-4 bg-primary/10 rounded-full w-fit group-hover:bg-primary/20 transition-colors group-hover:scale-110 duration-300">
              <BookOpen className="h-10 w-10 text-primary" />
            </div>
            <CardTitle className="text-xl group-hover:text-primary transition-colors">{subject}</CardTitle>
            <CardDescription>Click or hover to explore papers</CardDescription>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="flex items-center justify-center">
              <Badge
                variant="secondary"
                className="group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-300 px-4 py-1"
              >
                <ChevronDown className="h-4 w-4 mr-1 group-hover:translate-y-1 transition-transform" />
                Browse Papers
              </Badge>
            </div>
          </CardContent>
        </Card>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="center" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
        {/* Removed redundant subject name and description from here */}
        <div className="p-2 max-h-[calc(100vh-150px)] overflow-y-auto"> {/* Added max-height and overflow for long lists */}
          {sessions.length > 0 ? (
            sessions.map((session) => (
              <button
                key={session}
                onClick={() => {
                  onSelectSession(session)
                  setOpen(false) // Close popover after selection
                }}
                className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors text-left"
              >
                <div className="p-2 bg-primary/10 rounded-lg">
                  <Calendar className="h-5 w-5 text-primary" />
                </div>
                <div>
                  <div className="font-medium">{session}</div>
                  {/* Removed "Exam Session" - keeping it concise */}
                </div>
                <ChevronRight className="h-4 w-4 ml-auto text-muted-foreground" />
              </button>
            ))
          ) : (
            <div className="p-4 text-center text-muted-foreground">
              No sessions available for this subject.
            </div>
          )}
        </div>
      </PopoverContent>
    </Popover>
  )
}

// --- MAIN PAST PAPERS COMPONENT ---
const PastPapers = () => {
  const [view, setView] = useState<"subjects" | "years" | "papers">("subjects")
  const [selectedSubject, setSelectedSubject] = useState<string | null>(null)
  const [selectedSession, setSelectedSession] = useState<string | null>(null)
  const [selectedYear, setSelectedYear] = useState<string | null>(null)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const { toast } = useToast()

  const papers: PapersData = allPapersData
  const subjects = Object.keys(papers)

  const handleSelectSession = (subject: string, session: string) => {
    setSelectedSubject(subject)
    setSelectedSession(session)
    setView("years")
  }

  const handleSelectYear = (year: string) => {
    setSelectedYear(year)
    setView("papers")
  }

  const handleBack = () => {
    if (view === "papers") setView("years")
    else if (view === "years") {
      setView("subjects")
      setSelectedSubject(null)
      setSelectedSession(null)
    }
  }

  const handleBreadcrumbNavigate = (index: number) => {
    if (index === 0) {
      setView("subjects")
      setSelectedSubject(null)
      setSelectedSession(null)
      setSelectedYear(null)
    } else if (index === 1) {
      setView("years")
      setSelectedYear(null)
    }
  }

  const handleViewPdf = useCallback(
    async (pdf: PDFFileData | null) => {
      if (!pdf) return
      setIsLoading(true)
      toast({
        title: "Loading PDF...",
        description: `Fetching ${pdf.name}`,
      })

      try {
        const response = await fetch(pdf.path)
        if (!response.ok) throw new Error(`Failed to fetch PDF: ${response.statusText}`)
        const blob = await response.blob()
        const file = new File([blob], pdf.name, { type: "application/pdf" })
        setSelectedFile(file)
        toast({
          title: "Success!",
          description: "PDF loaded successfully",
        })
      } catch (error) {
        console.error("Error loading pre-defined PDF:", error)
        toast({
          title: "Error",
          description: "Could not load the selected PDF. Please try again.",
          variant: "destructive",
        })
      } finally {
        setIsLoading(false)
      }
    },
    [toast],
  )

  const handleLinkClick = (e: React.MouseEvent<HTMLAnchorElement>, pdf: PDFFileData | null) => {
    // Allow middle-click, right-click, and ctrl/cmd-click to open in a new tab
    if (e.button !== 0 || e.metaKey || e.ctrlKey) {
      return
    }
    // For a normal left-click, prevent the default link behavior
    e.preventDefault()
    // And open the in-app PDF viewer instead
    handleViewPdf(pdf)
  }

  const handleCloseViewer = useCallback(() => setSelectedFile(null), [])

  // --- RENDER LOGIC ---
  if (selectedFile) {
    return <PDFViewer file={selectedFile} onClose={handleCloseViewer} />
  }

  const renderContent = () => {
    switch (view) {
      case "years": {
        const years =
          selectedSubject && selectedSession
            ? Object.keys(papers[selectedSubject][selectedSession]).sort(
                (a, b) => Number.parseInt(b) - Number.parseInt(a),
              )
            : []
        return (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold tracking-tight mb-2">Select Year</h2>
              <p className="text-muted-foreground">
                Available years for {selectedSubject} - {selectedSession}
              </p>
            </div>
            <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 max-w-5xl mx-auto">
              {years.map((year) => (
                <Button
                  key={year}
                  variant="outline"
                  size="lg"
                  onClick={() => handleSelectYear(year)}
                  className="h-16 text-lg font-semibold hover:bg-primary hover:text-primary-foreground hover:border-primary transition-all duration-200 hover:scale-105"
                >
                  <div className="flex flex-col items-center gap-1">
                    <Clock className="h-4 w-4" />
                    {year}
                  </div>
                </Button>
              ))}
            </div>
          </div>
        )
      }

      case "papers": {
        const paperList =
          selectedSubject && selectedSession && selectedYear
            ? papers[selectedSubject][selectedSession][selectedYear]
            : []

        const groupedPapers = paperList.reduce<Record<string, PaperSet[]>>((acc, paper) => {
          const match = paper.series.match(/^(Paper\s+\d+)/)
          const groupName = match ? match[1] : "Uncategorized Papers"
          if (!acc[groupName]) {
            acc[groupName] = []
          }
          acc[groupName].push(paper)
          return acc
        }, {})

        Object.values(groupedPapers).forEach((group) => group.sort((a, b) => a.series.localeCompare(b.series)))

        const sortedGroupNames = Object.keys(groupedPapers).sort((a, b) => {
          const numA = Number.parseInt(a.replace(/\D/g, ""), 10)
          const numB = Number.parseInt(b.replace(/\D/g, ""), 10)
          return (isNaN(numA) ? 999 : numA) - (isNaN(numB) ? 999 : numB)
        })

        return (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold tracking-tight mb-2">Available Papers</h2>
              <p className="text-muted-foreground">
                {selectedSubject} • {selectedSession} • {selectedYear}
              </p>
            </div>
            {paperList.length > 0 ? (
              <div className="space-y-12 max-w-7xl mx-auto">
                {sortedGroupNames.map((groupName) => (
                  <div key={groupName}>
                    <h3 className="text-2xl font-semibold mb-6 border-b pb-3 flex items-center gap-3">
                      <BookOpen className="h-6 w-6 text-primary" />
                      {groupName}
                    </h3>
                    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                      {groupedPapers[groupName].map((paper) => (
                        <Card
                          key={paper.id}
                          className="flex flex-col hover:shadow-lg transition-all duration-300 border-2 hover:border-primary/30"
                        >
                          <CardHeader className="pb-4">
                            <div className="flex items-center gap-3">
                              <div className="p-2 bg-primary/10 rounded-lg">
                                <GraduationCap className="h-6 w-6 text-primary" />
                              </div>
                              <div>
                                <CardTitle className="text-xl">
                                  {paper.series.replace(groupName, "").trim() || "Main Variant"}
                                </CardTitle>
                                <CardDescription className="mt-1 text-xs">{paper.id}</CardDescription>
                              </div>
                            </div>
                          </CardHeader>
                          <CardContent className="space-y-3 flex-grow flex flex-col justify-end pt-0">
                            {/* Question Paper */}
                            {paper.qp ? (
                              <Button
                                asChild
                                size="lg"
                                className="w-full justify-between group hover:bg-blue-600 transition-colors"
                              >
                                <a
                                  href={paper.qp.path}
                                  onClick={(e) => handleLinkClick(e, paper.qp)}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="cursor-pointer"
                                >
                                  <div className="flex items-center gap-3">
                                    <FileText className="h-5 w-5" />
                                    <span className="font-medium">Question Paper</span>
                                  </div>
                                  <Eye className="h-4 w-4 group-hover:scale-110 transition-transform" />
                                </a>
                              </Button>
                            ) : (
                              <Button
                                className="w-full justify-between opacity-50 bg-transparent"
                                variant="outline"
                                disabled
                                size="lg"
                              >
                                <div className="flex items-center gap-3">
                                  <FileX className="h-5 w-5" />
                                  <span>Question Paper</span>
                                </div>
                                <span className="text-xs">Not Available</span>
                              </Button>
                            )}
                            {/* Mark Scheme */}
                            {paper.ms ? (
                              <Button
                                asChild
                                size="lg"
                                variant="outline"
                                className="w-full justify-between group hover:bg-green-600 transition-colors bg-transparent"
                              >
                                <a
                                  href={paper.ms.path}
                                  onClick={(e) => handleLinkClick(e, paper.ms)}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="cursor-pointer"
                                >
                                  <div className="flex items-center gap-3">
                                    <CheckSquare className="h-5 w-5" />
                                    <span className="font-medium">Mark Scheme</span>
                                  </div>
                                  <Eye className="h-4 w-4 group-hover:scale-110 transition-transform" />
                                </a>
                              </Button>
                            ) : (
                              <Button
                                className="w-full justify-between opacity-50 bg-transparent"
                                variant="outline"
                                disabled
                                size="lg"
                              >
                                <div className="flex items-center gap-3">
                                  <FileX className="h-5 w-5" />
                                  <span>Mark Scheme</span>
                                </div>
                                <span className="text-xs">Not Available</span>
                              </Button>
                            )}
                            {/* Insert (if available) */}
                            {paper.in && (
                              <Button
                                asChild
                                size="lg"
                                variant="outline"
                                className="w-full justify-between group hover:bg-purple-600 transition-colors bg-transparent"
                              >
                                <a
                                  href={paper.in.path}
                                  onClick={(e) => handleLinkClick(e, paper.in)}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="cursor-pointer"
                                >
                                  <div className="flex items-center gap-3">
                                    <ClipboardList className="h-5 w-5" />
                                    <span className="font-medium">Insert</span>
                                  </div>
                                  <Eye className="h-4 w-4 group-hover:scale-110 transition-transform" />
                                </a>
                              </Button>
                            )}
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12">
                <div className="mx-auto mb-4 p-4 bg-muted/50 rounded-full w-fit">
                  <FileX className="h-12 w-12 text-muted-foreground" />
                </div>
                <h3 className="text-xl font-semibold mb-2">No Papers Found</h3>
                <p className="text-muted-foreground max-w-md mx-auto">
                  No papers are available for this selection. Please try a different year or session.
                </p>
              </div>
            )}
          </div>
        )
      }

      case "subjects":
      default:
        return (
          <div className="space-y-12">
            <div className="text-center space-y-6">
              <div className="mx-auto mb-6 p-4 bg-primary/10 rounded-full w-fit">
                <GraduationCap className="h-16 w-16 text-primary" />
              </div>
              <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl md:text-6xl bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
                Past Papers Archive
              </h1>
              <p className="max-w-2xl mx-auto text-lg text-muted-foreground leading-relaxed">
                Access a comprehensive collection of past examination papers. Click or hover on a subject below to select a
                session and explore available years.
              </p>
            </div>
            {subjects.length > 0 ? (
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 max-w-5xl mx-auto">
                {subjects.map((subject) => {
                  const sessions = Object.keys(papers[subject])
                  return (
                    <SessionSelector
                      key={subject}
                      subject={subject}
                      sessions={sessions}
                      onSelectSession={(session) => handleSelectSession(subject, session)}
                    />
                  )
                })}
              </div>
            ) : (
              <Card className="max-w-2xl mx-auto border-destructive/50">
                <CardHeader className="text-center">
                  <div className="mx-auto mb-4 p-4 bg-destructive/10 rounded-full w-fit">
                    <FileX className="h-12 w-12 text-destructive" />
                  </div>
                  <CardTitle className="text-destructive text-2xl">No Data Found</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-muted-foreground text-center">
                    The papers database appears to be empty. Please check the following:
                  </p>
                  <div className="bg-muted/50 rounded-lg p-4">
                    <ul className="space-y-2 text-sm text-muted-foreground">
                      <li className="flex items-start gap-2">
                        <div className="h-1.5 w-1.5 rounded-full bg-primary mt-2 flex-shrink-0" />
                        Ensure PDF files are in{" "}
                        <code className="bg-muted px-1 rounded">
                          public/Past Paper/[Subject]/[Session]/[Year-Session]/
                        </code>
                      </li>
                      <li className="flex items-start gap-2">
                        <div className="h-1.5 w-1.5 rounded-full bg-primary mt-2 flex-shrink-0" />
                        Run <code className="bg-muted px-1 rounded">npm run dev</code> to generate the data file
                      </li>
                      <li className="flex items-start gap-2">
                        <div className="h-1.5 w-1.5 rounded-full bg-primary mt-2 flex-shrink-0" />
                        Verify folder and file naming conventions
                      </li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        )
    }
  }

  const breadcrumbSteps = [selectedSubject, selectedSession, selectedYear].filter(Boolean) as string[]

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20">
        <div className="container mx-auto px-4 py-8 lg:py-12">
          {isLoading && <LoadingOverlay />}
          {view !== "subjects" && (
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">
              <Breadcrumbs steps={breadcrumbSteps} onNavigate={handleBreadcrumbNavigate} />
              <Button
                variant="outline"
                onClick={handleBack}
                className="flex items-center gap-2 hover:bg-primary hover:text-primary-foreground transition-colors w-fit bg-transparent"
              >
                <ArrowLeft className="h-4 w-4" />
                Back
              </Button>
            </div>
          )}
          {renderContent()}
        </div>
      </div>
    </Layout>
  )
}

export default PastPapers